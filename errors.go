package rtm2

import (
	"fmt"
)

type RTMError struct {
	msg   string
	errno int
}

func (e RTMError) Error() string {
	return fmt.Sprintf("%d: %s", e.errno, e.msg)
}

func newRTMError(errno int, msg string) error {
	return RTMError{errno: errno, msg: msg}
}

var (
	ERROR_NOT_INITIALIZED                          = newRTMError(10001, "ERROR_NOT_INITIALIZED")
	ERROR_NOT_LOGIN                                = newRTMError(10002, "ERROR_NOT_LOGIN")
	ERROR_INVALID_APP_ID                           = newRTMError(10003, "ERROR_INVALID_APP_ID")
	ERROR_INVALID_EVENT_HANDLER                    = newRTMError(10004, "ERROR_INVALID_EVENT_HANDLER")
	ERROR_INVALID_TOKEN                            = newRTMError(10005, "ERROR_INVALID_TOKEN")
	ERROR_INVALID_USER_ID                          = newRTMError(10006, "ERROR_INVALID_USER_ID")
	ERROR_INIT_SERVICE_FAILED                      = newRTMError(10007, "ERROR_INIT_SERVICE_FAILED")
	ERROR_INVALID_CHANNEL_NAME                     = newRTMError(10008, "ERROR_INVALID_CHANNEL_NAME")
	ERROR_TOKEN_EXPIRED                            = newRTMError(10009, "ERROR_TOKEN_EXPIRED")
	ERROR_LOGIN_NO_SERVER_RESOURCES                = newRTMError(10010, "ERROR_LOGIN_NO_SERVER_RESOURCES")
	ERROR_LOGIN_TIMEOUT                            = newRTMError(10011, "ERROR_LOGIN_TIMEOUT")
	ERROR_LOGIN_REJECTED                           = newRTMError(10012, "ERROR_LOGIN_REJECTED")
	ERROR_LOGIN_ABORTED                            = newRTMError(10013, "ERROR_LOGIN_ABORTED")
	ERROR_INVALID_PARAMETER                        = newRTMError(10014, "ERROR_INVALID_PARAMETER")
	ERROR_LOGIN_NOT_AUTHORIZED                     = newRTMError(10015, "ERROR_LOGIN_NOT_AUTHORIZED")
	ERROR_INCONSISTENT_APPID                       = newRTMError(10016, "ERROR_INCONSISTENT_APPID")
	ERROR_DUPLICATE_OPERATION                      = newRTMError(10017, "ERROR_DUPLICATE_OPERATION")
	ERROR_INSTANCE_ALREADY_RELEASED                = newRTMError(10018, "ERROR_INSTANCE_ALREADY_RELEASED")
	ERROR_INVALID_CHANNEL_TYPE                     = newRTMError(10019, "ERROR_INVALID_CHANNEL_TYPE")
	ERROR_CHANNEL_NOT_JOINED                       = newRTMError(11001, "ERROR_CHANNEL_NOT_JOINED")
	ERROR_CHANNEL_NOT_SUBSCRIBED                   = newRTMError(11002, "ERROR_CHANNEL_NOT_SUBSCRIBED")
	ERROR_CHANNEL_EXCEED_TOPIC_USER_LIMITATION     = newRTMError(11003, "ERROR_CHANNEL_EXCEED_TOPIC_USER_LIMITATION")
	ERROR_CHANNEL_IN_REUSE                         = newRTMError(11004, "ERROR_CHANNEL_IN_REUSE")
	ERROR_CHANNEL_INSTANCE_EXCEED_LIMITATION       = newRTMError(11005, "ERROR_CHANNEL_INSTANCE_EXCEED_LIMITATION")
	ERROR_CHANNEL_IN_ERROR_STATE                   = newRTMError(11006, "ERROR_CHANNEL_IN_ERROR_STATE")
	ERROR_CHANNEL_JOIN_FAILED                      = newRTMError(11007, "ERROR_CHANNEL_JOIN_FAILED")
	ERROR_CHANNEL_INVALID_TOPIC_NAME               = newRTMError(11008, "ERROR_CHANNEL_INVALID_TOPIC_NAME")
	ERROR_CHANNEL_INVALID_MESSAGE                  = newRTMError(11009, "ERROR_CHANNEL_INVALID_MESSAGE")
	ERROR_CHANNEL_MESSAGE_LENGTH_EXCEED_LIMITATION = newRTMError(11010, "ERROR_CHANNEL_MESSAGE_LENGTH_EXCEED_LIMITATION")
	ERROR_CHANNEL_INVALID_USER_LIST                = newRTMError(11011, "ERROR_CHANNEL_INVALID_USER_LIST")
	ERROR_CHANNEL_NOT_AVAILABLE                    = newRTMError(11012, "ERROR_CHANNEL_NOT_AVAILABLE")
	ERROR_CHANNEL_TOPIC_NOT_SUBSCRIBED             = newRTMError(11013, "ERROR_CHANNEL_TOPIC_NOT_SUBSCRIBED")
	ERROR_CHANNEL_EXCEED_TOPIC_LIMITATION          = newRTMError(11014, "ERROR_CHANNEL_EXCEED_TOPIC_LIMITATION")
	ERROR_CHANNEL_JOIN_TOPIC_FAILED                = newRTMError(11015, "ERROR_CHANNEL_JOIN_TOPIC_FAILED")
	ERROR_CHANNEL_TOPIC_NOT_JOINED                 = newRTMError(11016, "ERROR_CHANNEL_TOPIC_NOT_JOINED")
	ERROR_CHANNEL_TOPIC_NOT_EXIST                  = newRTMError(11017, "ERROR_CHANNEL_TOPIC_NOT_EXIST")
	ERROR_CHANNEL_INVALID_TOPIC_META               = newRTMError(11018, "ERROR_CHANNEL_INVALID_TOPIC_META")
	ERROR_CHANNEL_SUBSCRIBE_TIMEOUT                = newRTMError(11019, "ERROR_CHANNEL_SUBSCRIBE_TIMEOUT")
	ERROR_CHANNEL_SUBSCRIBE_TOO_FREQUENT           = newRTMError(11020, "ERROR_CHANNEL_SUBSCRIBE_TOO_FREQUENT")
	ERROR_CHANNEL_SUBSCRIBE_FAILED                 = newRTMError(11021, "ERROR_CHANNEL_SUBSCRIBE_FAILED")
	ERROR_CHANNEL_UNSUBSCRIBE_FAILED               = newRTMError(11022, "ERROR_CHANNEL_UNSUBSCRIBE_FAILED")
	ERROR_CHANNEL_ENCRYPT_MESSAGE_FAILED           = newRTMError(11023, "ERROR_CHANNEL_ENCRYPT_MESSAGE_FAILED")
	ERROR_CHANNEL_PUBLISH_MESSAGE_FAILED           = newRTMError(11024, "ERROR_CHANNEL_PUBLISH_MESSAGE_FAILED")
	ERROR_CHANNEL_PUBLISH_MESSAGE_TOO_FREQUENT     = newRTMError(11025, "ERROR_CHANNEL_PUBLISH_MESSAGE_TOO_FREQUENT")
	ERROR_CHANNEL_PUBLISH_MESSAGE_TIMEOUT          = newRTMError(11026, "ERROR_CHANNEL_PUBLISH_MESSAGE_TIMEOUT")
	ERROR_CHANNEL_NOT_CONNECTED                    = newRTMError(11027, "ERROR_CHANNEL_NOT_CONNECTED")
	ERROR_CHANNEL_LEAVE_FAILED                     = newRTMError(11028, "ERROR_CHANNEL_LEAVE_FAILED")
	ERROR_CHANNEL_CUSTOM_TYPE_LENGTH_OVERFLOW      = newRTMError(11029, "ERROR_CHANNEL_CUSTOM_TYPE_LENGTH_OVERFLOW")
	ERROR_CHANNEL_INVALID_CUSTOM_TYPE              = newRTMError(11030, "ERROR_CHANNEL_INVALID_CUSTOM_TYPE")
	ERROR_CHANNEL_UNSUPPORTED_MESSAGE_TYPE         = newRTMError(11031, "ERROR_CHANNEL_UNSUPPORTED_MESSAGE_TYPE")
	ERROR_CHANNEL_PRESENCE_NOT_READY               = newRTMError(11032, "ERROR_CHANNEL_PRESENCE_NOT_READY")
	ERROR_CHANNEL_RECEIVER_OFFLINE                 = newRTMError(11033, "ERROR_CHANNEL_RECEIVER_OFFLINE")
	ERROR_STORAGE_OPERATION_FAILED                 = newRTMError(12001, "ERROR_STORAGE_OPERATION_FAILED")
	ERROR_STORAGE_METADATA_ITEM_EXCEED_LIMITATION  = newRTMError(12002, "ERROR_STORAGE_METADATA_ITEM_EXCEED_LIMITATION")
	ERROR_STORAGE_INVALID_METADATA_ITEM            = newRTMError(12003, "ERROR_STORAGE_INVALID_METADATA_ITEM")
	ERROR_STORAGE_INVALID_ARGUMENT                 = newRTMError(12004, "ERROR_STORAGE_INVALID_ARGUMENT")
	ERROR_STORAGE_INVALID_REVISION                 = newRTMError(12005, "ERROR_STORAGE_INVALID_REVISION")
	ERROR_STORAGE_METADATA_LENGTH_OVERFLOW         = newRTMError(12006, "ERROR_STORAGE_METADATA_LENGTH_OVERFLOW")
	ERROR_STORAGE_INVALID_LOCK_NAME                = newRTMError(12007, "ERROR_STORAGE_INVALID_LOCK_NAME")
	ERROR_STORAGE_LOCK_NOT_ACQUIRED                = newRTMError(12008, "ERROR_STORAGE_LOCK_NOT_ACQUIRED")
	ERROR_STORAGE_INVALID_KEY                      = newRTMError(12009, "ERROR_STORAGE_INVALID_KEY")
	ERROR_STORAGE_INVALID_VALUE                    = newRTMError(12010, "ERROR_STORAGE_INVALID_VALUE")
	ERROR_STORAGE_KEY_LENGTH_OVERFLOW              = newRTMError(12011, "ERROR_STORAGE_KEY_LENGTH_OVERFLOW")
	ERROR_STORAGE_VALUE_LENGTH_OVERFLOW            = newRTMError(12012, "ERROR_STORAGE_VALUE_LENGTH_OVERFLOW")
	ERROR_STORAGE_DUPLICATE_KEY                    = newRTMError(12013, "ERROR_STORAGE_DUPLICATE_KEY")
	ERROR_STORAGE_OUTDATED_REVISION                = newRTMError(12014, "ERROR_STORAGE_OUTDATED_REVISION")
	ERROR_STORAGE_NOT_SUBSCRIBE                    = newRTMError(12015, "ERROR_STORAGE_NOT_SUBSCRIBE")
	ERROR_STORAGE_INVALID_METADATA_INSTANCE        = newRTMError(12016, "ERROR_STORAGE_INVALID_METADATA_INSTANCE")
	ERROR_STORAGE_SUBSCRIBE_USER_EXCEED_LIMITATION = newRTMError(12017, "ERROR_STORAGE_SUBSCRIBE_USER_EXCEED_LIMITATION")
	ERROR_STORAGE_OPERATION_TIMEOUT                = newRTMError(12018, "ERROR_STORAGE_OPERATION_TIMEOUT")
	ERROR_STORAGE_NOT_AVAILABLE                    = newRTMError(12019, "ERROR_STORAGE_NOT_AVAILABLE")
	ERROR_PRESENCE_NOT_CONNECTED                   = newRTMError(13001, "ERROR_PRESENCE_NOT_CONNECTED")
	ERROR_PRESENCE_NOT_WRITABLE                    = newRTMError(13002, "ERROR_PRESENCE_NOT_WRITABLE")
	ERROR_PRESENCE_INVALID_ARGUMENT                = newRTMError(13003, "ERROR_PRESENCE_INVALID_ARGUMENT")
	ERROR_PRESENCE_CACHED_TOO_MANY_STATES          = newRTMError(13004, "ERROR_PRESENCE_CACHED_TOO_MANY_STATES")
	ERROR_PRESENCE_STATE_COUNT_OVERFLOW            = newRTMError(13005, "ERROR_PRESENCE_STATE_COUNT_OVERFLOW")
	ERROR_PRESENCE_INVALID_STATE_KEY               = newRTMError(13006, "ERROR_PRESENCE_INVALID_STATE_KEY")
	ERROR_PRESENCE_INVALID_STATE_VALUE             = newRTMError(13007, "ERROR_PRESENCE_INVALID_STATE_VALUE")
	ERROR_PRESENCE_STATE_KEY_SIZE_OVERFLOW         = newRTMError(13008, "ERROR_PRESENCE_STATE_KEY_SIZE_OVERFLOW")
	ERROR_PRESENCE_STATE_VALUE_SIZE_OVERFLOW       = newRTMError(13009, "ERROR_PRESENCE_STATE_VALUE_SIZE_OVERFLOW")
	ERROR_PRESENCE_STATE_DUPLICATE_KEY             = newRTMError(13010, "ERROR_PRESENCE_STATE_DUPLICATE_KEY")
	ERROR_PRESENCE_USER_NOT_EXIST                  = newRTMError(13011, "ERROR_PRESENCE_USER_NOT_EXIST")
	ERROR_PRESENCE_OPERATION_TIMEOUT               = newRTMError(13012, "ERROR_PRESENCE_OPERATION_TIMEOUT")
	ERROR_PRESENCE_OPERATION_FAILED                = newRTMError(13013, "ERROR_PRESENCE_OPERATION_FAILED")
	ERROR_LOCK_OPERATION_FAILED                    = newRTMError(14001, "ERROR_LOCK_OPERATION_FAILED")
	ERROR_LOCK_OPERATION_TIMEOUT                   = newRTMError(14002, "ERROR_LOCK_OPERATION_TIMEOUT")
	ERROR_LOCK_OPERATION_PERFORMING                = newRTMError(14003, "ERROR_LOCK_OPERATION_PERFORMING")
	ERROR_LOCK_ALREADY_EXIST                       = newRTMError(14004, "ERROR_LOCK_ALREADY_EXIST")
	ERROR_LOCK_INVALID_NAME                        = newRTMError(14005, "ERROR_LOCK_INVALID_NAME")
	ERROR_LOCK_NOT_ACQUIRED                        = newRTMError(14006, "ERROR_LOCK_NOT_ACQUIRED")
	ERROR_LOCK_ACQUIRE_FAILED                      = newRTMError(14007, "ERROR_LOCK_ACQUIRE_FAILED")
	ERROR_LOCK_NOT_EXIST                           = newRTMError(14008, "ERROR_LOCK_NOT_EXIST")
	ERROR_LOCK_NOT_AVAILABLE                       = newRTMError(14009, "ERROR_LOCK_NOT_AVAILABLE")
)

func ErrorFromCode(errno int32) error {
	if errno == 0 {
		return nil
	}
	switch errno {
	case 10001:
		return ERROR_NOT_INITIALIZED
	case 10002:
		return ERROR_NOT_LOGIN
	case 10003:
		return ERROR_INVALID_APP_ID
	case 10004:
		return ERROR_INVALID_EVENT_HANDLER
	case 10005:
		return ERROR_INVALID_TOKEN
	case 10006:
		return ERROR_INVALID_USER_ID
	case 10007:
		return ERROR_INIT_SERVICE_FAILED
	case 10008:
		return ERROR_INVALID_CHANNEL_NAME
	case 10009:
		return ERROR_TOKEN_EXPIRED
	case 10010:
		return ERROR_LOGIN_NO_SERVER_RESOURCES
	case 10011:
		return ERROR_LOGIN_TIMEOUT
	case 10012:
		return ERROR_LOGIN_REJECTED
	case 10013:
		return ERROR_LOGIN_ABORTED
	case 10014:
		return ERROR_INVALID_PARAMETER
	case 10015:
		return ERROR_LOGIN_NOT_AUTHORIZED
	case 10016:
		return ERROR_INCONSISTENT_APPID
	case 10017:
		return ERROR_DUPLICATE_OPERATION
	case 10018:
		return ERROR_INSTANCE_ALREADY_RELEASED
	case 10019:
		return ERROR_INVALID_CHANNEL_TYPE
	case 11001:
		return ERROR_CHANNEL_NOT_JOINED
	case 11002:
		return ERROR_CHANNEL_NOT_SUBSCRIBED
	case 11003:
		return ERROR_CHANNEL_EXCEED_TOPIC_USER_LIMITATION
	case 11004:
		return ERROR_CHANNEL_IN_REUSE
	case 11005:
		return ERROR_CHANNEL_INSTANCE_EXCEED_LIMITATION
	case 11006:
		return ERROR_CHANNEL_IN_ERROR_STATE
	case 11007:
		return ERROR_CHANNEL_JOIN_FAILED
	case 11008:
		return ERROR_CHANNEL_INVALID_TOPIC_NAME
	case 11009:
		return ERROR_CHANNEL_INVALID_MESSAGE
	case 11010:
		return ERROR_CHANNEL_MESSAGE_LENGTH_EXCEED_LIMITATION
	case 11011:
		return ERROR_CHANNEL_INVALID_USER_LIST
	case 11012:
		return ERROR_CHANNEL_NOT_AVAILABLE
	case 11013:
		return ERROR_CHANNEL_TOPIC_NOT_SUBSCRIBED
	case 11014:
		return ERROR_CHANNEL_EXCEED_TOPIC_LIMITATION
	case 11015:
		return ERROR_CHANNEL_JOIN_TOPIC_FAILED
	case 11016:
		return ERROR_CHANNEL_TOPIC_NOT_JOINED
	case 11017:
		return ERROR_CHANNEL_TOPIC_NOT_EXIST
	case 11018:
		return ERROR_CHANNEL_INVALID_TOPIC_META
	case 11019:
		return ERROR_CHANNEL_SUBSCRIBE_TIMEOUT
	case 11020:
		return ERROR_CHANNEL_SUBSCRIBE_TOO_FREQUENT
	case 11021:
		return ERROR_CHANNEL_SUBSCRIBE_FAILED
	case 11022:
		return ERROR_CHANNEL_UNSUBSCRIBE_FAILED
	case 11023:
		return ERROR_CHANNEL_ENCRYPT_MESSAGE_FAILED
	case 11024:
		return ERROR_CHANNEL_PUBLISH_MESSAGE_FAILED
	case 11025:
		return ERROR_CHANNEL_PUBLISH_MESSAGE_TOO_FREQUENT
	case 11026:
		return ERROR_CHANNEL_PUBLISH_MESSAGE_TIMEOUT
	case 11027:
		return ERROR_CHANNEL_NOT_CONNECTED
	case 11028:
		return ERROR_CHANNEL_LEAVE_FAILED
	case 11029:
		return ERROR_CHANNEL_CUSTOM_TYPE_LENGTH_OVERFLOW
	case 11030:
		return ERROR_CHANNEL_INVALID_CUSTOM_TYPE
	case 11031:
		return ERROR_CHANNEL_UNSUPPORTED_MESSAGE_TYPE
	case 11032:
		return ERROR_CHANNEL_PRESENCE_NOT_READY
	case 11033:
		return ERROR_CHANNEL_RECEIVER_OFFLINE
	case 12001:
		return ERROR_STORAGE_OPERATION_FAILED
	case 12002:
		return ERROR_STORAGE_METADATA_ITEM_EXCEED_LIMITATION
	case 12003:
		return ERROR_STORAGE_INVALID_METADATA_ITEM
	case 12004:
		return ERROR_STORAGE_INVALID_ARGUMENT
	case 12005:
		return ERROR_STORAGE_INVALID_REVISION
	case 12006:
		return ERROR_STORAGE_METADATA_LENGTH_OVERFLOW
	case 12007:
		return ERROR_STORAGE_INVALID_LOCK_NAME
	case 12008:
		return ERROR_STORAGE_LOCK_NOT_ACQUIRED
	case 12009:
		return ERROR_STORAGE_INVALID_KEY
	case 12010:
		return ERROR_STORAGE_INVALID_VALUE
	case 12011:
		return ERROR_STORAGE_KEY_LENGTH_OVERFLOW
	case 12012:
		return ERROR_STORAGE_VALUE_LENGTH_OVERFLOW
	case 12013:
		return ERROR_STORAGE_DUPLICATE_KEY
	case 12014:
		return ERROR_STORAGE_OUTDATED_REVISION
	case 12015:
		return ERROR_STORAGE_NOT_SUBSCRIBE
	case 12016:
		return ERROR_STORAGE_INVALID_METADATA_INSTANCE
	case 12017:
		return ERROR_STORAGE_SUBSCRIBE_USER_EXCEED_LIMITATION
	case 12018:
		return ERROR_STORAGE_OPERATION_TIMEOUT
	case 12019:
		return ERROR_STORAGE_NOT_AVAILABLE
	case 13001:
		return ERROR_PRESENCE_NOT_CONNECTED
	case 13002:
		return ERROR_PRESENCE_NOT_WRITABLE
	case 13003:
		return ERROR_PRESENCE_INVALID_ARGUMENT
	case 13004:
		return ERROR_PRESENCE_CACHED_TOO_MANY_STATES
	case 13005:
		return ERROR_PRESENCE_STATE_COUNT_OVERFLOW
	case 13006:
		return ERROR_PRESENCE_INVALID_STATE_KEY
	case 13007:
		return ERROR_PRESENCE_INVALID_STATE_VALUE
	case 13008:
		return ERROR_PRESENCE_STATE_KEY_SIZE_OVERFLOW
	case 13009:
		return ERROR_PRESENCE_STATE_VALUE_SIZE_OVERFLOW
	case 13010:
		return ERROR_PRESENCE_STATE_DUPLICATE_KEY
	case 13011:
		return ERROR_PRESENCE_USER_NOT_EXIST
	case 13012:
		return ERROR_PRESENCE_OPERATION_TIMEOUT
	case 13013:
		return ERROR_PRESENCE_OPERATION_FAILED
	case 14001:
		return ERROR_LOCK_OPERATION_FAILED
	case 14002:
		return ERROR_LOCK_OPERATION_TIMEOUT
	case 14003:
		return ERROR_LOCK_OPERATION_PERFORMING
	case 14004:
		return ERROR_LOCK_ALREADY_EXIST
	case 14005:
		return ERROR_LOCK_INVALID_NAME
	case 14006:
		return ERROR_LOCK_NOT_ACQUIRED
	case 14007:
		return ERROR_LOCK_ACQUIRE_FAILED
	case 14008:
		return ERROR_LOCK_NOT_EXIST
	case 14009:
		return ERROR_LOCK_NOT_AVAILABLE
	default:
		return newRTMError(int(errno), "UNKNOWN ERROR")
	}
}
